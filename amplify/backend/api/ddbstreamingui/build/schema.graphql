type windspeed {
  id: ID!
  deviceID: String
  value: Int
  index: Int
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
}

enum ModelSortDirection {
  ASC
  DESC
}

type ModelwindspeedConnection {
  items: [windspeed]
  nextToken: String
}

input ModelStringInput {
  ne: String
  eq: String
  le: String
  lt: String
  ge: String
  gt: String
  contains: String
  notContains: String
  between: [String]
  beginsWith: String
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  size: ModelSizeInput
}

input ModelIDInput {
  ne: ID
  eq: ID
  le: ID
  lt: ID
  ge: ID
  gt: ID
  contains: ID
  notContains: ID
  between: [ID]
  beginsWith: ID
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  size: ModelSizeInput
}

input ModelIntInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelFloatInput {
  ne: Float
  eq: Float
  le: Float
  lt: Float
  ge: Float
  gt: Float
  between: [Float]
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelBooleanInput {
  ne: Boolean
  eq: Boolean
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelSizeInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
}

input ModelwindspeedFilterInput {
  id: ModelIDInput
  deviceID: ModelStringInput
  value: ModelIntInput
  index: ModelIntInput
  and: [ModelwindspeedFilterInput]
  or: [ModelwindspeedFilterInput]
  not: ModelwindspeedFilterInput
}

enum ModelAttributeTypes {
  binary
  binarySet
  bool
  list
  map
  number
  numberSet
  string
  stringSet
  _null
}

type Query {
  getWindspeed(id: ID!): windspeed
  listWindspeeds(filter: ModelwindspeedFilterInput, limit: Int, nextToken: String): ModelwindspeedConnection
}

input CreateWindspeedInput {
  id: ID
  deviceID: String
  value: Int
  index: Int
}

input UpdateWindspeedInput {
  id: ID!
  deviceID: String
  value: Int
  index: Int
}

input DeleteWindspeedInput {
  id: ID
}

type Mutation {
  createWindspeed(input: CreateWindspeedInput!, condition: ModelwindspeedConditionInput): windspeed
  updateWindspeed(input: UpdateWindspeedInput!, condition: ModelwindspeedConditionInput): windspeed
  deleteWindspeed(input: DeleteWindspeedInput!, condition: ModelwindspeedConditionInput): windspeed
}

input ModelwindspeedConditionInput {
  deviceID: ModelStringInput
  value: ModelIntInput
  index: ModelIntInput
  and: [ModelwindspeedConditionInput]
  or: [ModelwindspeedConditionInput]
  not: ModelwindspeedConditionInput
}

type Subscription {
  onCreateWindspeed: windspeed @aws_subscribe(mutations: ["createWindspeed"])
  onUpdateWindspeed: windspeed @aws_subscribe(mutations: ["updateWindspeed"])
  onDeleteWindspeed: windspeed @aws_subscribe(mutations: ["deleteWindspeed"])
}
